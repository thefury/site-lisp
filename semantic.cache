;; Object site-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "site-lisp/"
  :tables (list 
   (semanticdb-table "haml-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [525 538]) ("defgroup" code nil nil [570 671]) ("haml-mode-hook" variable nil nil [673 770]) ("haml-indent-offset" variable (:default-value 2) nil [772 883]) ("haml-backspace-backdents-nesting" variable (:default-value t) nil [885 1106]) ("haml-tab-face" variable (:default-value (quote ((((class color)) (:background "hotpink")) (t (:reverse-video t))))) nil [1108 1289]) ("haml-indent-function" variable (:default-value (quote haml-indent-p)) nil [1291 1452]) ("haml-block-openers" variable (:default-value (\` ("^ *\\([%\\.#][^ 	]*\\)\\(\\[.*\\]\\)?\\({.*}\\)?\\(\\[.*\\]\\)?[ 	]*$" "^ *[-=].*do[ 	]*\\(|.*|[ 	]*\\)?$" (\, (concat "^ *-[ 	]*\\(" (regexp-opt (quote ("if" "unless" "while" "until" "else" "begin" "elsif" "rescue" "ensure" "when"))) "\\)")) "^ */\\(\\[.*\\]\\)?[ 	]*$" "^ *-#" "^ *:"))) nil [1454 1930]) ("haml-font-lock-keywords" variable (:constant-flag t :default-value (quote (("^ *\\(	\\)" 1 (quote haml-tab-face)) ("^!!!.*" 0 font-lock-constant-face) ("\\('[^']*'\\)" 1 font-lock-string-face append) ("\\(\"[^\"]*\"\\)" 1 font-lock-string-face append) ("&?:\\w+" 0 font-lock-constant-face append) ("@[a-z0-9_]+" 0 font-lock-variable-name-face append) ("| *$" 0 font-lock-string-face) ("^[ 	]*\\(/.*\\)$" 1 font-lock-comment-face append) ("^ *\\(#[a-z0-9_]+/?\\)" 1 font-lock-keyword-face) ("^ *\\(\\.[a-z0-9_]+/?\\)" 1 font-lock-type-face) ("^ *\\(%[a-z0-9_]+/?\\)" 1 font-lock-function-name-face) ("^ *\\(#[a-z0-9_]+/?\\)" (1 font-lock-keyword-face) ("\\.[a-z0-9_]+" nil nil (0 font-lock-type-face))) ("^ *\\(\\.[a-z0-9_]+/?\\)" (1 font-lock-type-face) ("\\.[a-z0-9_]+" nil nil (0 font-lock-type-face))) ("^ *\\(\\.[a-z0-9_]+/?\\)" (1 font-lock-type-face) ("\\#[a-z0-9_]+" nil nil (0 font-lock-keyword-face))) ("^ *\\(%[a-z0-9_]+/?\\)" (1 font-lock-function-name-face) ("\\.[a-z0-9_]+" nil nil (0 font-lock-type-face))) ("^ *\\(%[a-z0-9_]+/?\\)" (1 font-lock-function-name-face) ("\\#[a-z0-9_]+" nil nil (0 font-lock-keyword-face))) ("^ *\\([~=-] .*\\)" 1 font-lock-preprocessor-face prepend) ("^ *[\\.#%a-z0-9_]+\\([~=-] .*\\)" 1 font-lock-preprocessor-face prepend) ("^ *[\\.#%a-z0-9_]+\\({[^}]+}\\)" 1 font-lock-preprocessor-face prepend) ("^ *[\\.#%a-z0-9_]+\\(\\[[^]]+\\]\\)" 1 font-lock-preprocessor-face prepend)))) nil [1946 3435]) ("haml-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 58 "." table) (modify-syntax-entry 95 "w" table) table)) nil [3452 3655]) ("haml-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [backspace] (quote haml-electric-backspace)) (define-key map "" (quote haml-electric-backspace)) (define-key map "\206" (quote haml-forward-sexp)) (define-key map "\202" (quote haml-backward-sexp)) (define-key map "\225" (quote haml-up-list)) (define-key map "\204" (quote haml-down-list)) (define-key map "" (quote haml-kill-line-and-indent)) map)) nil [3657 4087]) ("define-derived-mode" code nil nil [4089 4525]) ("haml-forward-through-whitespace" function (:arguments ("&optional" "backward")) nil [4542 4981]) ("haml-at-indent-p" function nil nil [4983 5240]) ("haml-forward-sexp" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [5242 5982]) ("haml-backward-sexp" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [5984 6325]) ("haml-up-list" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [6327 6740]) ("haml-down-list" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [6742 7224]) ("haml-mark-sexp-but-not-next-line" function nil nil [7226 7548]) ("haml-indent-p" function nil nil [7584 7788]) ("haml-compute-indentation" function nil nil [7790 8106]) ("haml-indent-region" function (:arguments ("start" "end")) nil [8108 9536]) ("haml-indent-line" function (:user-visible-flag t) nil [9538 10324]) ("haml-reindent-region-by" function (:arguments ("n")) nil [10326 10760]) ("haml-electric-backspace" function (:user-visible-flag t :arguments ("arg")) nil [10762 11573]) ("haml-kill-line-and-indent" function (:user-visible-flag t) nil [11575 11826]) ("haml-mode" package nil nil [11849 11869]))
    :file "haml-mode.el"
    :pointmax 11869
    )
   (semanticdb-table "css-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cssm-version" variable (:default-value "0.11") nil [133 205]) ("apropos" include nil nil [2142 2160]) ("font-lock" include nil nil [2161 2181]) ("cl" include nil nil [2182 2195]) ("cssm-indent-level" variable (:default-value 2) nil [2245 2318]) ("cssm-mirror-mode" variable (:default-value t) nil [2319 2428]) ("cssm-newline-before-closing-bracket" variable nil nil [2429 2578]) ("cssm-indent-function" variable (:default-value (function cssm-old-style-indenter)) nil [2579 2756]) ("cssm-properties" variable (:default-value (quote ("font-family" "font-style" "font-variant" "font-weight" "font-size" "font" "background-color" "background-image" "background-repeat" "background-attachment" "background-position" "color" "background" "word-spacing" "letter-spacing" "border-top-width" "border-right-width" "border-left-width" "border-bottom-width" "border-width" "list-style-type" "list-style-image" "list-style-position" "text-decoration" "vertical-align" "text-transform" "text-align" "text-indent" "line-height" "margin-top" "margin-right" "margin-bottom" "margin-left" "margin" "padding-top" "padding-right" "padding-bottom" "padding-left" "padding" "border-top" "border-right" "border-bottom" "border-left" "border" "width" "height" "float" "clear" "display" "list-style" "white-space" "border-style" "border-color" "azimuth" "border-bottom-color" "border-bottom-style" "border-collapse" "border-left-color" "border-left-style" "border-right-color" "border-right-style" "border-top-color" "border-top-style" "caption-side" "cell-spacing" "clip" "column-span" "content" "cue" "cue-after" "cue-before" "cursor" "direction" "elevation" "font-size-adjust" "left" "marks" "max-height" "max-width" "min-height" "min-width" "orphans" "overflow" "page-break-after" "page-break-before" "pause" "pause-after" "pause-before" "pitch" "pitch-range" "play-during" "position" "richness" "right" "row-span" "size" "speak" "speak-date" "speak-header" "speak-punctuation" "speak-time" "speech-rate" "stress" "table-layout" "text-shadow" "top" "visibility" "voice-family" "volume" "widows" "z-index"))) nil [2783 4515]) ("cssm-properties-alist" variable (:default-value (mapcar (lambda (prop) (cons (concat prop ":") nil)) cssm-properties)) nil [4517 4696]) ("cssm-keywords" variable (:default-value (append (quote ("!\\s-*important" "@media" "@import" "@page" "@font-face")) (mapcar (lambda (property) (concat property "\\s-*:")) cssm-properties))) nil [4698 4982]) ("cssm-pseudos" variable (:default-value (quote ("link" "visited" "active" "first-line" "first-letter" "first-child" "before" "after" "hover"))) nil [4984 5164]) ("cssm-list-2-regexp" function (:arguments ("altlist")) nil [5177 5491]) ("cssm-font-lock-keywords" variable (:default-value (list (cons (cssm-list-2-regexp cssm-keywords) font-lock-keyword-face) (cons "\\.[a-zA-Z][-a-zA-Z0-9.]+" font-lock-variable-name-face) (cons (concat ":" (cssm-list-2-regexp cssm-pseudos)) font-lock-variable-name-face) (cons "#[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)?" font-lock-reference-face) (cons "\\[.*\\]" font-lock-variable-name-face) (cons "#[-a-zA-Z0-9]*" font-lock-function-name-face) (cons "rgb(\\s-*[0-9]+\\(\\.[0-9]+\\s-*%\\s-*\\)?\\s-*,\\s-*[0-9]+\\(\\.[0-9]+\\s-*%\\s-*\\)?\\s-*,\\s-*[0-9]+\\(\\.[0-9]+\\s-*%\\s-*\\)?\\s-*)" font-lock-reference-face))) nil [5493 6223]) ("cssm-mode-map" variable nil nil [6225 6279]) ("when" code nil nil [6280 6664]) ("when" code nil nil [6705 6994]) ("cssm-insert-right-brace-and-indent" function nil nil [7037 7133]) ("cssm-inside-atmedia-rule" function nil nil [7146 7910]) ("cssm-rule-is-atmedia" function nil nil [7923 8157]) ("cssm-find-column" function (:arguments ("first-char")) nil [8170 9804]) ("cssm-indent-line" function (:user-visible-flag t) nil [9806 10517]) ("cssm-old-style-indenter" function (:arguments ("position" "column" "first-char-on-line")) nil [10547 10934]) ("cssm-c-style-indenter" function (:arguments ("position" "column" "first-char-on-line")) nil [10936 11392]) ("define-skeleton" code nil nil [11416 11574]) ("define-skeleton" code nil nil [11576 11669]) ("define-skeleton" code nil nil [11671 11776]) ("define-skeleton" code nil nil [11778 11863]) ("define-skeleton" code nil nil [11865 11936]) ("define-skeleton" code nil nil [11938 12033]) ("cssm-enter-mirror-mode" function (:user-visible-flag t) nil [12035 12473]) ("cssm-leave-mirror-mode" function (:user-visible-flag t) nil [12475 12838]) ("cssm-property-at-point" function nil nil [12865 13089]) ("cssm-maximum-common" function (:arguments ("alt1" "alt2")) nil [13102 13514]) ("cssm-common-beginning" function (:arguments ("alts")) nil [13527 13754]) ("cssm-complete-property-frame" function (:arguments ("completions")) nil [13756 14194]) ("cssm-complete-property" function (:user-visible-flag t) nil [14196 14826]) ("css-mode" function (:user-visible-flag t) nil [14828 15908]) ("css-mode" package nil nil [15910 15929]))
    :file "css-mode.el"
    :pointmax 15952
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
